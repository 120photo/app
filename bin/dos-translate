#!/usr/bin/env node

// Little hack to include `NODE_PATH=.`
var path = require('path');
require('node-path')(module, [path.resolve('.')]);

var fs = require('fs');
var arrDiff = require('arr-diff');
var config = require('lib/config');

// Load the list of available languages.
var LANGS_FOLDER = 'lib/translations/lib'
var languages = fs.readdirSync(LANGS_FOLDER).map(function(v){
  return v.replace('.json', '');
});

function halt(err){
  if (err) console.error(err)
  process.exit(1);
}

function getLangPath(lang) {
  return path.join(LANGS_FOLDER, lang + '.json');
}

function getLang(lang) {
  return require(getLangPath(lang));
}

function getLangKeys(lang) {
  return Object.keys(getLang(lang));
}

function forEachLanguageFile(langs, cb) {
  var jsonFile = require('json-file-plus');

  return langs.forEach(function(lang){
    jsonFile(getLangPath(lang), function(err, file) {
      if (err) return halt(err);
      cb.call(file, lang, file);
    });
  });
}

var opts = require('nomnom')
  .options({
    from: {
      abbr: 'f',
      help: 'Base language to use as reference.',
      choices: languages
    },
    to: {
      abbr: 't',
      help: 'Target language, will default to all the other languages.',
      list: true,
      choices: languages
    },
    'list-missing': {
      abbr: 'l',
      help: 'Shows a list of missing keys on the specified `--to` languages.',
      flag: true
    },
    'translate-missing': {
      abbr: 'm',
      help: 'Fill missing keys of `--to` using the translated values of `--from`.',
      flag: true
    },
    'delete-key': {
      abbr: 'd',
      help: 'Delete the given key(s) on all language files.',
      list: true
    }
  })
  .nom();

function requireFrom() {
  if (!opts.from) halt('Need to specify `--from` param.');
}

// Make `--to` param optional
function defaultTo() {
  if (!opts.to || !opts.to.length) {
    opts.to = languages.filter(function(v){ return v !== opts.from; })
  }
}


if (opts['list-missing']) (function(){
  requireFrom()
  defaultTo()

  var fromKeys = getLangKeys(opts.from);

  opts.to.forEach(function(lang){
    var toKeys = getLangKeys(lang);
    var missing = arrDiff(fromKeys, toKeys);

    if (!missing.length) return;

    console.log('Missing ' + missing.length + ' keys on `' + lang + '`:');

    missing.forEach(function(k){
      console.log('  - ' + k);
    });
  });
})();


if (opts['translate-missing']) (function(){
  requireFrom()
  defaultTo()

  var googleTranslate = require('google-translate')(config.googleAPIKey);
  var fromLang = getLang(opts.from);
  var fromKeys = getLangKeys(opts.from);

  var missings = {}
  var langs = opts.to.filter(function(lang){
    var toKeys = getLangKeys(lang);
    var missing = arrDiff(fromKeys, toKeys);

    if (missing.length) missings[lang] = missing;

    return !!missing.length;
  });

  forEachLanguageFile(langs, function(lang, file){
    missings[lang].forEach(function(k){
      googleTranslate.translate(fromLang[k], opts.from, lang, callback);
      function callback(err, translation) {
        if (err) return halt(err);

        var t = {};
        t[k] = translation.translatedText;
        file.set(t);

        file.save().then(function() {
          console.log('  "' + k + '": "' + translation.translatedText + '"');
        }).catch(function(err) {
          halt(err);
        });
      }
    });
  });
})();


if (opts['delete-key']) (function(){

  forEachLanguageFile(languages, function(lang, file){
    opts['delete-key'].forEach(function(key){
      if (!file.data[key]) return;
      file.data[key] = undefined;
    });

    file.save().then(function() {
      console.log('Deleted keys from `' + lang + '`:')
      opts['delete-key'].forEach(function(key){
        console.log('  "' + key + '"');
      });
    }).catch(function(err) {
      halt(err);
    });
  });

})();
