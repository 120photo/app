#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');

program
  .option('-n, --name <file>', 'base name for build files defaulting to "app"', 'app')
  .option('-o, --out <dir>', 'output directory defaulting to ./public', 'public')
  .option('-d, --debug', 'debug mode logging component-builder, component-consoler, component-resolver defaulting to false', false);

program.parse(process.argv);

if (program.debug) require('debug').enable('component-builder*,component-consoler*,component-resolver*');

var path = require('path');

// Little hack to include `NODE_PATH=.`
require('node-path')(module, [path.resolve('.')]);


var args = program.args;
var build = require('component-builder');
var fs = require('fs');
var exists = fs.existsSync || path.existsSync;
var jade = require('builder-jade');
var log = require('debug')('democracyos:build');
var mkdir = require('mkdirp');
var Resolve = require('component-resolver');
var stylus = require('lib/component-stylus');
var utils = require('component-consoler');
var rimraf = require('rimraf');

// component.json required

if (!exists('component.json')) utils.fatal('missing component.json');

var jsPath = path.join(program.out, program.name + '.js');
var cssPath = path.join(program.out, program.name + '.css');

mkdir.sync(program.out);

// whitespace

console.log();

process.on('exit', function(){
  console.log();
});

// resolve

var watching = program.watch || program.reload;
var resolving = false;

var tree;

if (!watching) return resolve();

function resolve() {
  if (resolving) return;
  resolving = true;
  var start = Date.now();
  Resolve(process.cwd(), null, function (err, res) {
    resolving = false;
    if (err) {
      if (!watching) utils.fatal(err);
      utils.error('build', 'resolve failed: ' + err.message);
      return;
    }

    tree = res;

    log('build', 'resolved in ' + (Date.now() - start) + 'ms');

    buildScripts();
    buildStyles();
    buildFiles();
  })
}

function buildScripts() {
  if (resolving) return;
  var start = Date.now();
  build.scripts(tree)
    .use('scripts', build.plugins.js())
    .use('json', build.plugins.json())
    .use('templates', jade({
      string: false,
      runtime: true
    }))
    .use('templates', build.plugins.string())
    .end(function (err, js) {
      if (err) {
        utils.error(err);
        if (fs.existsSync(jsPath)) fs.unlinkSync(jsPath);
        return;
      }

      if (!js) return;
      fs.writeFile(jsPath, build.scripts.require + jade.runtime + js);
      log('build', jsPath + ' in '
        + (Date.now() - start) + 'ms - '
        + (js.length / 1024 | 0) + 'kb');
      // reload(jsPath);
    });
}

function buildStyles() {
  if (resolving) return;
  var start = Date.now();
  build.styles(tree)
    .use('styles', build.plugins.css())
    .use('styles', stylus())
    .use('styles', build.plugins.urlRewriter(''))
    .end(function (err, css) {
      if (err) {
        utils.error(err);
        if (fs.existsSync(cssPath)) fs.unlinkSync(cssPath);
        return;
      }
      if (!css) return;
      fs.writeFile(cssPath, css);
      log('build', cssPath + ' in '
        + (Date.now() - start) + 'ms - '
        + (css.length / 1024 | 0) + 'kb');
      // reload(cssPath);
    });
}

function buildFiles() {
  if (resolving) return;
  var start = Date.now();
  build.files(tree, {destination: program.out})
    .use('images', build.plugins.copy())
    .use('files', build.plugins.copy())
    .end(function (err) {
      if (err) {
        utils.error(err);
        rimraf(options.destination, function(err) {
          if (err) return utils.fatal(err);
        });
      } else {
        log('build', 'files in ' + (Date.now() - start) + 'ms');
      }
    });
}