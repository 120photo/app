li.media.comment-item(class=classes)
  span.pull-left
    img(src=profilePictureUrl).avatar

  .media-body
    h5.media-heading
      | #{comment.author.fullName} 
      small.ago(data-time=comment.createdAt.toString())
      - if (comment.editedAt)
        small.edited Â· #{t('comments.edited')}
      small=':'
      - if (citizen.logged() && !own)
        - var spamTitle = flags ?  t('Not spam') : t('Spam')
        a.comment-action.link-report.flag(href="#", title=spamTitle, class=flags ? 'selected' : '')
          i.glyphicon.glyphicon-flag
          span.count=comment.flags.length ? comment.flags.length : ''
      - if (own)
        a.comment-action.link-edit.btn-edit(href="#", title=t('comments.edit.argument'))
          i.icon-pencil
    .comment-body
      div.comment-text!=markdown(comment.text)
      p.spam-message=t('This argument has been flagged as spam')
        | .
        span.show-spam: a(href="#")= t('show')
      .comment-actions
        span.comment-counter=(comment.upvotes.length - comment.downvotes.length)
        - classes = []
        - likes && classes.push('selected')
        a.comment-action.vote-comment.like(href="#", title=t('Upvote'), class=classes)
          i.icon-angle-up
        - classes = []
        - dislikes && classes.push('selected')
        a.comment-action.vote-comment.dislike(href="#", title=t('Downvote'), class=classes)
          i.icon-angle-down
        - if (repliesCounter || citizen.id)
          - var title = repliesCounter + ' ' + (repliesCounter > 1 ? t('comments.replies') : t('comments.reply'))
          a.comment-action.comment-reply.pull-right(href='#', title=title.toLowerCase())
            span.reply-counter= repliesCounter > 0 ? repliesCounter : ''
          a.comment-action.comment-reply.pull-right(href='#', title=t('comments.reply-to-argument'))
            i.icon-reply
      span.error